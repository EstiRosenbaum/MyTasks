---SELECT Query---
---1
SELECT PRODUCT_ID,PRODUCT_NAME,LIST_PRICE FROM oe.product_information ORDER BY PRODUCT_NAME;
---2
SELECT FIRST_NAME , LAST_NAME ,PHONE_NUMBER,
(EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM HIRE_DATE))as "NUMBER_YEARS_WORKING" 
FROM hr.employees;
---3
SELECT FIRST_NAME , LAST_NAME,SALARY FROM hr.employees 
    WHERE EXTRACT(YEAR FROM HIRE_DATE)>2005 ORDER BY SALARY;
---4
SELECT PRODUCT_NAME FROM oe.product_information 
WHERE (LIST_PRICE-MIN_PRICE)>100 ORDER BY PRODUCT_NAME;
---Join Tables---
---1
SELECT c.CUSTOMER_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME,o.ORDER_ID 
FROM oe.customers c JOIN oe.orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID 
WHERE (EXTRACT(YEAR FROM o.ORDER_DATE))=2007 
and c.CREDIT_LIMIT between 200 and 700 ORDER BY c.CUST_FIRST_NAME,o.ORDER_ID;
---2
SELECT pi.PRODUCT_NAME ,pi.LIST_PRICE ,ct.CATEGORY_NAME 
FROM oe.product_information pi JOIN oe.categories_tab ct 
ON pi.CATEGORY_ID=ct.CATEGORY_ID ORDER BY CATEGORY_NAME ;

---3
SELECT c.CUST_FIRST_NAME, c.CUST_LAST_NAME,pi.PRODUCT_NAME
FROM oe.customers c 
JOIN oe.orders o 
ON c.CUSTOMER_ID=o.CUSTOMER_ID 
JOIN oe.order_items oi 
ON oi.ORDER_ID=o.ORDER_ID
JOIN oe.product_information pi
ON pi.PRODUCT_ID=oi.PRODUCT_ID
WHERE (EXTRACT(YEAR FROM o.ORDER_DATE))=2008 and oi.UNIT_PRICE>10;
---4
SELECT o.ORDER_ID,pi.PRODUCT_NAME ,(oi.QUANTITY*oi.UNIT_PRICE) as PRICE FROM oe.orders o 
JOIN oe.customers c
ON c.CUSTOMER_ID=o.CUSTOMER_ID
JOIN oe.order_items oi 
ON oi.ORDER_ID=o.ORDER_ID
JOIN oe.product_information pi
ON oi.PRODUCT_ID =pi.PRODUCT_ID
WHERE (EXTRACT(YEAR FROM o.ORDER_DATE))=2007;

---5
SELECT
    (e.FIRST_NAME || '  ' || e.LAST_NAME) as employee,
    (m.FIRST_NAME || '  ' || m.LAST_NAME) as manager
FROM
    hr.employees e
LEFT JOIN hr.employees m ON
    m.employee_id = e.manager_id

---Aggregation Functions---
   
---1
SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM HIRE_DATE)) AS AVG_SENIORITY
FROM hr.employees;
---3
SELECT COUNT(PRODUCT_ID)AS HOW_MANY_PRODUCTS,SUPPLIER_ID
FROM OE.product_information
GROUP BY SUPPLIER_ID;
---4
SELECT SUM(QUANTITY) AS HOW_MANY_ITEMS,PRODUCT_ID
FROM OE.order_items
GROUP BY PRODUCT_ID;
---5
SELECT EXTRACT(YEAR FROM ORDER_DATE)AS YEAR, MIN(ORDER_DATE)AS FIRST,MAX(ORDER_DATE)AS LAST,COUNT(ORDER_ID)AS COUNT,SUM(ORDER_TOTAL)AS SUM
FROM OE.orders
GROUP BY (EXTRACT(YEAR FROM ORDER_DATE));

---6
SELECT (EXTRACT(DAY FROM ORDER_DATE))AS DAY,COUNT(ORDER_ID)AS COUNT,SUM(ORDER_TOTAL)AS SUM
FROM OE.orders
GROUP BY (EXTRACT(DAY FROM ORDER_DATE));

---7
SELECT SALES_REP_ID,SUM(ORDER_TOTAL)AS MORE_$20000
FROM oe.orders
WHERE EXTRACT(YEAR FROM ORDER_DATE)=2007
GROUP BY (SALES_REP_ID)
HAVING SUM(ORDER_TOTAL)>20000
---8
SELECT ROUND(SUM(ORDER_TOTAL)/1000) AS POINTS,CUSTOMER_ID
FROM oe.orders 
GROUP BY CUSTOMER_ID
HAVING (SUM(ORDER_TOTAL)/1000)>1


---Sub Queries---
---1
SELECT PRODUCT_ID,PRODUCT_NAME,LIST_PRICE
FROM oe.product_information
WHERE LIST_PRICE=(SELECT MAX(LIST_PRICE) FROM oe.product_information);
---2
SELECT PRODUCT_NAME
FROM oe.product_information
WHERE PRODUCT_ID=(SELECT PRODUCT_ID FROM oe.order_items WHERE UNIT_PRICE=
    (SELECT MAX(UNIT_PRICE) FROM oe.order_items) AND ROWNUM <= 1);
---3
SELECT UNIT_PRICE
FROM oe.order_items
WHERE UNIT_PRICE>(SELECT AVG(UNIT_PRICE) FROM oe.order_items);
---4
SELECT PRODUCT_NAME
FROM oe.product_information PI 
JOIN oe.order_items OI
ON PI.PRODUCT_ID=OI.PRODUCT_ID
JOIN OE.orders O
ON O.ORDER_ID=OI.ORDER_ID
WHERE EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM ORDER_DATE)=
(SELECT MAX(EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM ORDER_DATE))
FROM oe.orders)
    
---5
    
SELECT pi.PRODUCT_NAME,pi.LIST_PRICE
FROM oe.product_information pi
JOIN oe.order_items oi
ON oi.PRODUCT_ID=pi.PRODUCT_ID
JOIN oe.orders o
ON o.ORDER_ID=oi.ORDER_ID
WHERE oi.ORDER_ID=(SELECT ORDER_ID FROM oe.order_items WHERE UNIT_PRICE=
    (SELECT MAX(UNIT_PRICE) FROM oe.order_items) AND ROWNUM <= 1);

---Analytic Functions---
---1

WITH EXPENSIVE AS (
  SELECT PI.LIST_PRICE,PI.PRODUCT_NAME,PI.CATEGORY_ID, ROW_NUMBER () OVER (
           PARTITION BY CATEGORY_ID
           ORDER BY LIST_PRICE DESC
         ) rn
  FROM   oe.product_information PI
)
SELECT * FROM EXPENSIVE
WHERE  rn <= 3

---2

SELECT (EXTRACT(YEAR FROM ORDER_DATE)),SUM(ORDER_TOTAL) AS TOTAL,
       LAG(SUM(ORDER_TOTAL), 1, 0) OVER (ORDER BY (EXTRACT(YEAR FROM ORDER_DATE)))AS ORDER_TOTAL_PREV,
       SUM(ORDER_TOTAL) - LAG(SUM(ORDER_TOTAL), 1, 0) OVER (ORDER BY (EXTRACT(YEAR FROM ORDER_DATE))) AS ORDER_TOTAL_DIFF
FROM   oe.orders
GROUP BY (EXTRACT(YEAR FROM ORDER_DATE));

---3

SELECT EXTRACT(YEAR FROM ORDER_DATE)AS YEAR
,EXTRACT(MONTH FROM ORDER_DATE)AS MONTH
,SUM(ORDER_TOTAL) MONTH_TOTAL
,SUM(SUM(ORDER_TOTAL)) OVER (PARTITION BY EXTRACT(YEAR FROM ORDER_DATE) ORDER BY EXTRACT(MONTH FROM ORDER_DATE)) AS running_total
FROM oe.orders 
GROUP BY EXTRACT(YEAR FROM ORDER_DATE),EXTRACT(MONTH FROM ORDER_DATE);
